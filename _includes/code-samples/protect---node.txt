// Create an ExecutionContext using credentials
const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);

// Create new permissions instance and add the required permissions
const protectPDF = PDFServicesSdk.ProtectPDF,
  protectPDFOptions = protectPDF.options,
  permissions = protectPDFOptions.Permissions.createNew();
    permissions.addPermission(protectPDFOptions.Permission.PRINT_LOW_QUALITY);
    permissions.addPermission(protectPDFOptions.Permission.EDIT_DOCUMENT_ASSEMBLY);
    permissions.addPermission(protectPDFOptions.Permission.COPY_CONTENT);

// Build ProtectPDF options by setting a User as well as an Owner/Permissions Password, Permissions,
// Encryption Algorithm (used for encrypting the PDF file) and specifying the type of content to encrypt.
const options = new protectPDFOptions.PasswordProtectOptions.Builder()
  .setUserPassword("openpassword")
  .setOwnerPassword("permissionspassword")
  .setPermissions(permissions)
  .setEncryptionAlgorithm(protectPDFOptions.EncryptionAlgorithm.AES_256)
  .setContentEncryption(protectPDFOptions.ContentEncryption.ALL_CONTENT_EXCEPT_METADATA)
  .build();

// Create a new operation instance.
const protectPDFOperation = protectPDF.Operation.createNew(options);

// Set operation input from a source file.
const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/protectPDFInput.pdf');
  protectPDFOperation.setInput(input);

// Execute the operation and Save the result to the specified location.
protectPDFOperation.execute(executionContext)
  .then(result => result.saveAsFile('output/protectPDFOutput.pdf'))