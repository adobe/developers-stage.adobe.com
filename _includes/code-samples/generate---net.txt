// Get the samples from https://www.adobe.com/go/pdfservicesapi_net_samples
namespace MergeDocumentToPDF
{
  class Program
  {
    private static readonly ILog log = LogManager.GetLogger(typeof(Program));
    static void Main()
    {
      //Configure the logging
      ConfigureLogging();
      try
      {
        // Initial setup, create credentials instance.
        Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()
          .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")
          .Build();

        // Create an ExecutionContext using credentials.
        ExecutionContext executionContext = ExecutionContext.Create(credentials);

        // Setup input data for the document merge process
        var content = File.ReadAllText(@"salesOrder.json");
        JObject jsonDataForMerge = JObject.Parse(content);

        // Create a new DocumentMerge Options instance
        DocumentMergeOptions documentMergeOptions =
          new DocumentMergeOptions(jsonDataForMerge, OutputFormat.PDF);

        // Create a new DocumentMerge Operation instance with the DocumentMerge Options instance
        DocumentMergeOperation documentMergeOperation =
          DocumentMergeOperation.CreateNew(documentMergeOptions);

        // Set the operation input document template from a source file.
        documentMergeOperation
          .SetInput(FileRef.CreateFromLocalFile(@"salesOrderTemplate.docx"));

        // Execute the operation.
        FileRef result = documentMergeOperation.Execute(executionContext);

        // Save the result to the specified location
        result.SaveAs(Directory.GetCurrentDirectory() + "/output/salesOrderOutput.pdf");
      }
      catch (ServiceUsageException ex)
      {
        log.Error("Exception encountered while executing operation", ex);
      }
      // Catch more errors here. . .
    }

    static void ConfigureLogging()
    {
      ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());
      XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));
    }
  }
}